spring.application.name=API-GATEWAY
server.port=9191
#the port on which the service will be exposed will be routed to by the api-gateway's url
#the url will be http://localhost:9191/api/employee in this case,
#and the request will be forwarded to employee-service using the predicate path described below
eureka.instance.client.serviceUrl.defaultZone=http://localhost:8761/eureka

#Automatic routing
#spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true
#logging.level.org.springframework.cloud.gateway=debug



#Routes
spring.cloud.gateway.routes[0].id=EMPLOYEE-SERVICE
spring.cloud.gateway.routes[0].uri=lb://EMPLOYEE-SERVICE
# This specifies the target service where incoming requests will be forwarded.
#lb:// indicates that the spring load balancer will be used to distribute the requests among the instances.
#EMPLOYEE-SERVICE is the name of the service
#This filter determines which requests will be forwarded to which service
#here we are forwarding all requests to employee service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/employee/**
#Essentially, this route configures the Spring Cloud Gateway to:
#
#Match any incoming request with a path starting with /employee/ (e.g.,
# /employee/details, /employee/list).
#Use Spring Cloud Load Balancer to distribute the request among registered instances
# of the EMPLOYEE-SERVICE microservice.
#
#let's do this for department service
spring.cloud.gateway.routes[1].id=DEPARTMENT-SERVICE
spring.cloud.gateway.routes[1].uri=lb://DEPARTMENT-SERVICE
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/department/**
eureka.instance.prefer-ip-address=true

#spring.cloud.gateway.routes[2].id=CONFIG-SERVER
#spring.cloud.gateway.routes[2].uri=http://localhost:8888
#spring.cloud.gateway.routes[2].predicates[0]=Path=/api/config/**